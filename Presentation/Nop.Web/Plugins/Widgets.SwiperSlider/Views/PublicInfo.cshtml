@model SwiperSliderSettings

<link rel="stylesheet" href="~/Plugins/Widgets.SwiperSlider/Content/swiperslider/swiper-bundle.css" />
<script asp-exclude-from-bundle="true" src="~/Plugins/Widgets.SwiperSlider/Content/swiperslider/swiper-bundle.js" asp-location="Footer"></script>

@if (!string.IsNullOrEmpty(Model.CustomCss))
{
    <style type="text/css">
            @Model.CustomCss
    </style>
}

<div class="swiper">
    <div class="swiper-wrapper">
        <div class="swiper-slide">Slide 1</div>
        <div class="swiper-slide">Slide 2</div>
        <div class="swiper-slide">Slide 3</div>
        ...
    </div>
    @if (Model.PaginationEnabled)
    {
        <div class="swiper-pagination"></div>
    }

    @if (Model.NavigationEnabled)
    {
        <div class="swiper-button-prev"></div>
        <div class="swiper-button-next"></div>
    }

    @if (Model.ScrollBarEnabled)
    {
        <div class="swiper-scrollbar"></div>
    }
</div>

<script type="text/javascript">

    const swiper = new Swiper("@Model.SwiperCssSelector", {

        direction: "@Model.Direction.ToString().ToLower()",
        centeredSlides: @Model.CenteredSlidesEnabled.ToString().ToLower(),
        freeMode: @Model.FreeModeEnabled.ToString().ToLower(),
        loop: @Model.Loop.ToString().ToLower(),

        @if(Model.Loop)
        {
            <text>
            loopFillGroupWithBlank: @Model.LoopFillGroupWithBlankEnabled.ToString().ToLower(),
            </text>
        }
        speed: @Model.Speed,

    @if (Model.PaginationEnabled)
    {
        <text>
            pagination: {
            el: "@Model.PaginationCssSelector",
            clickable: @Model.PaginationClickableEnabled.ToString().ToLower(),
            dynamicBullets: @Model.DynamicBulletsEnabled.ToString().ToLower()
                },
        </text>
    }

    @if (Model.NavigationEnabled)
    {
        <text>
            navigation: {
            nextEl: "@Model.NavigationNextCssSelector",
            prevEl: "@Model.NavigationPrevCssSelector",
        },
        </text>
    }

    @if (Model.ScrollBarEnabled)
    {
        <text>
            scrollbar: {
            el: "@Model.ScrollBarCssSelector",
        },
        </text>
    }


    @if (Model.AutoPlayEnabled)
    {
        <text>
            autoplay: {
            delay: @Model.AutoPlayDelay,
            disableOnInteraction: @Model.AutoPlayDisableOnInteraction.ToString().ToLower(),
        },
        </text>
    }

    @if (!string.IsNullOrEmpty(Model.SlidesPerView))
    {
        @if (Int32.TryParse(Model.SlidesPerView, out var slidePerView))
        {
            <text>
                slidesPerView: @Model.SlidesPerView,
                slidesPerGroup: @Model.SlidesPerGroup,
            </text>
        }
        else
        {
            <text>
                slidesPerView: 'auto',
            </text>
        }
    }


    @if (Model.SpaceBetween > 0)
    {
        <text>
            spaceBetween: @Model.SpaceBetween,
        </text>
    }




    });
</script>